function TranscriptionCycleMCMC(varargin)

%Fits transcription cycle model from Liu et al (2020) using Markov Chain
%Monte Carlo, implemented in the MCMCstat package. The data must be
%generated using a dual color MS2/PP7 reported as described in Liu et al.

%The code can load multiple datasets, and possesses user-specified options
%as variable arguments. The details of these inputs are described in the
%readme and in the manuscript, and are initialized with default values if
%not specified by the user.


%Variable arguments:
%   'fileDir', fileDir: directory of dataset files (default = root
%   directory)
%   'saveLoc', saveLoc: directory of saved MCMC results (default = root
%   directory)
%   'numParPools', numParPools: number of parallel workers to use (default
%   = 8)
%   'n_burn', n_burn: number of burn-in steps in MCMC algorithm (default = 10000)
%   'n_steps', n_steps: number of steps in MCMC algorithm including burn-in (default =
%   20000)
%   'ratePriorWidth', ratePriorWidth: standard deviation of Gaussian prior
%   for rate fluctuation term dR(t) (default = 50, see Liu et al, Section S3.1) 
%   't_start', t_start: time value to start fit at (default = 0)
%   't_end', t_end: time value to end fit at (default = Inf)
%   'loadPrevious', true/false: option to load previous inference results
%   to retain inferred elongation rate for hierarchical fit (see Liu et al,
%   Section S3.2
%   'construct', construct: option to specify a custom reporter gene that
%   must be defined in the subfunction GetFluorFromPolPos (default uses the
%   P2P-MS2-lacZ-PP7 construct from Liu et al)

%% Variable inputs
%Default settings
fileDir = '';
saveLoc = '';
numParPools = 8;
n_burn = 10000;
n_steps = 20000;
ratePriorWidth = 50;
t_start = 0;
t_end = Inf;
loadPrevious = false;
construct = 'P2P-MS2v5-LacZ-PP7v4';

for i=1:length(varargin)
    if strcmpi(varargin{i},'fileDir')
        fileDir = varargin{i+1};
    end
    if strcmpi(varargin{i},'saveLoc')
        saveLoc = varargin{i+1};
    end
    if strcmpi(varargin{i},'n_burn')
        n_burn = varargin{i+1};
    end
    if strcmpi(varargin{i},'n_steps')
        n_steps = varargin{i+1};
    end
    if strcmpi(varargin{i},'ratePriorWidth')
        ratePriorWidth = varargin{i+1};
    end
    if strcmpi(varargin{i},'t_start')
        t_start = varargin{i+1};
    end
    if strcmpi(varargin{i},'t_end')
        t_end = varargin{i+1};
    end
    if strcmpi(varargin{i},'loadPrevious')
        loadPrevious = true;
    end
    if strcmpi(varargin{i},'construct')
        construct = varargin{i+1};
    end
end

%% Load data
%If loadPrevious setting is specified, choose which results to load.
%Still need to update this section
initialresults_all = [];
if loadPrevious
    initialresults = dir([fileDir,'*.mat']);
    initialresults_names = {initialresults.name};
    
    %Only look at InitialRise data
    initialriseindices = contains(initialresults_names,'InitialRise');
    initialresults = initialresults(initialriseindices);
    initialresults_names = {initialresults_names{initialriseindices}};

    [s,v] = listdlg('PromptString','Select a dataset:','SelectionMode',...
        'multiple','ListString',initialresults_names); %s is the indices of the chosen datasets
    
    %Load the InitialRise results (just store elongation rate for now, along with Prefix)
    initialresults_all = struct('MCMCresults',{},'Prefix',{}); %Structure containing InitialRise results
    for i = 1:length(s)
        initialresults_temp = load([initialresults(s(i)).folder,'\',initialresults_names{s(i)}]);
        initialresults_all(i).Prefix = initialresults_temp.Prefix;
        for j = 1:length(initialresults_temp.MCMCresults)
            initialresults_all(i).MCMCresults(j).mean_v = initialresults_temp.MCMCresults(j).mean_v;
            initialresults_all(i).MCMCresults(j).cell_index = initialresults_temp.MCMCresults(j).cell_index;
            initialresults_all(i).MCMCresults(j).ApprovedFits = initialresults_temp.MCMCresults(j).ApprovedFits;
            
        end
    end
    
    %Load the data
    fileloc = 'S:\Jonathan\Dropbox\2 Color Elongation\Filtered Particles';
    data_all = struct('ElapsedTime',{},'Prefix',{},'TwoColorFilteredParticles',{},...
        'nc12',{},'nc13',{},'nc14',{});
    for i = 1:length(initialresults_all)
        dat = load([fileloc,'\',initialresults_all(i).Prefix,'.mat']);
        temp.ElapsedTime = dat.ElapsedTime;
        temp.Prefix = dat.Prefix;
        temp.nc12 = dat.nc12;
        temp.nc13 = dat.nc13;
        temp.nc14 = dat.nc14;
        temp.TwoColorFilteredParticles = dat.TwoColorFilteredParticles;
        data_all(i) = temp;
    end
else
    %Otherwise, choose which dataset to infer results for.
    files = dir([fileDir,'*.mat']);
    names = {files.name};

    [s,v] = listdlg('PromptString','Select a dataset:','SelectionMode',...
        'multiple','ListString',names); %s is the indices of the chosen datasets
    
    %Load the data
    data_all = struct('data',{});
    for i = 1:length(s)
        dat = load([files(s(i)).folder,'\',names{s(i)}]);
        data_all(i).data = dat.data;
    end
end

w = waitbar(0,'Analyzing datasets...');

%% Load each dataset and set definitions
for k = 1:length(data_all)
waitbar(k/length(data_all),w,['Analyzing dataset ',num2str(k),' of ',num2str(length(data_all))]);


N = length(data_all(k).data); %Number of cells

%Setup data to be saved in structure
MCMCchain = struct('v_chain',{},'ton_chain',{},'A_chain',{},'tau_chain',{},...
    'MS2_basal_chain',{},'PP7_basal_chain',{},'R_chain',{},'dR_chain',{},'s2chain',{});
MCMCresults = struct('mean_v',{},'sigma_v',{},'mean_ton',{},'sigma_ton',{},...
    'mean_A',{},'sigma_A',{},'mean_tau',{},'sigma_tau',{},...
    'mean_MS2_basal',{},'sigma_MS2_basal',{},'mean_PP7_basal',{},'sigma_PP7_basal',{},'mean_R',{},...
    'sigma_R',{},'mean_dR',{},'sigma_dR',{},'mean_sigma',{},'sigma_sigma',{},...
    'cell_index',{},'ApprovedFits',{});
MCMCplot = struct('t_plot',{},'MS2_plot',{},'PP7_plot',{},...
    'simMS2',{},'simPP7',{});
DatasetName = data_all(k).data(1).name; %Assuming all the cells come from the same dataset

%% MCMC analysis loop through single cells
parfor (cellNum = 1:N,numPools)
%Define time vector
t = data_all(k).data(cellNum).time; %Time vector for this cell

%Truncate time vector to user-specified range
indStart = find(t > t_start,1,'first'); %Index of first used timepoint
indEnd = find(t < t_end,1,'last'); %Index of last used timepoint
t = t(indStart:indEnd);

%Initialize MS2 and PP7 signals
MS2 = data_all(k).data(cellNum).MS2;
PP7 = data_all(k).data(cellNum).PP7;

%MCMC data structure initialization
data = [];
data.xdata = t; %Time data
data.ydata = [MS2,PP7]; %Fluorescence data

%% Setup MCMC Fit

%Define the anonymous functions for the sum of squares function and model.
ssfun = @(x,data) SumofSquaresConstant_MCMCstat_FreeScaling(construct,datatype,data,x,...
    {modeltypestring,x(4),x(1),'basal',x(5),x(6),'MeanRate'});


%Initialize MCMC parameters.
% JL 10/28/2020: Need to update this to allow user specification of MCMC
% parameters, bounds, and priors
%Load previously inferred elongation rate if desired
if loadPrevious
    cellToload = find([initialresults_all(k).MCMCresults.cell_index] == cellNum);
    v0 = initialresults_all(k).MCMCresults(cellToload).mean_v;
    if isempty(v0)
        continue
    end
else
    v0 = 1+2*rand; %Initial guess for elongation rate (kb/min)
end
ton0 = 4*rand;
A0 = rand;
tau0 = 4*rand;
MS2_basal0 = 10;
PP7_basal0 = 5;
R0 = 15
dR0 = normrnd(0,3,1,size(MS2_interp,2)-1)

x0 = [v0,tau0,ton0,MS2_basal0,PP7_basal0,A0,R0,dR0];

sigma2_0 = 1; %Initial guess for error variance

%This is the variance in the parameter proposal distribution. Change these
%to change the proposal acceptance rate, or if the convergence doesn't look
%good.
if loadPrevious
    v_step = 0.0000001;
else
    v_step = 0.05;
end
ton_step = dt;
A_step = 0.05;
dwell_step = 0.1;
termrate_step = 0.1;
MS2_basal_step = 1;
PP7_basal_step = 1;
R_step = 0.5;
dR_step = 0.5*ones(size(dR0));

J0 = diag([v_step, tau_step, ton_step, MS2_basal_step,...
    PP7_basal_step, A_step, R_step, dR_step]); %Initial covariance matrix
%% Setup MCMC parameters and options
%Limits on elongation rate (depending on if we're fixing it from previously
%inferred results or letting it be a free parameter)
if loadPrevious
    v_lower = v0-0.00001;
    v_upper = v0+0.00001;
else
    v_lower = 0;
    v_upper = 10;
end
params = {
    {'v', x0(1), v_lower, v_upper}
    {'tau', x0(2), 0, 20}
    {'ton', x0(3), 0, 10}
    {'MS2_basal', x0(4), 0, 50}
    {'PP7_basal', x0(5), 0, 50}
    {'A', x0(6), 0, 1}
    {'R', x0(7), 0, 40}
    };
%Rate fluctuations

for i = 1:size(dR0,2)
    params{end+1} = {strcat('dR',num2str(i)), x0(8+i), -30, 30, 0, prior_sigma}; %Fluctuations with priors around zero
end

model = [];
model.ssfun = ssfun;
model.sigma2 = sigma2_0;
model.N = length(data.ydata);

%MCMC options
options = [];
options.nsimu = n_steps; %Number of steps
options.updatesigma = 1; %Update error variance
options.qcov = J0; %Initial covariance
options.burnintime = n_burn; %Burn in time
options.adaptint = 100;
options.method = 'dram';
options.verbosity = 0; %Decrease text output

%Run the MCMC
[results,chain,s2chain] = mcmcrun(model,data,params,options);

%Extract chain results into individual parameters
v_chain = chain(n_burn:end,1);
tau_chain = chain(n_burn:end,2);
ton_chain = chain(n_burn:end,3);
MS2_basal_chain = chain(n_burn:end,4);
PP7_basal_chain = chain(n_burn:end,5);
A_chain = chain(n_burn:end,6);
R_chain = chain(n_burn:end,7);
dR_chain = chain(n_burn:end,8:end);

%Mean results
mean_v = mean(v_chain);
sigma_v = std(v_chain,1);
mean_tau = mean(tau_chain);
sigma_tau = std(tau_chain,1);
mean_ton = mean(ton_chain);
sigma_ton = std(ton_chain,1);
mean_MS2_basal = mean(MS2_basal_chain);
sigma_MS2_basal = std(MS2_basal_chain,1);
mean_PP7_basal = mean(PP7_basal_chain);
sigma_PP7_basal = std(PP7_basal_chain,1);
mean_A = mean(A_chain);
sigma_A = std(A_chain,1);
mean_R = mean(R_chain,1);
sigma_R = std(R_chain,1);
mean_dR = mean(dR_chain,1);
mean_dR = std(dR_chain,1);
mean_sigma = sqrt(mean(s2chain));
sigma_sigma = std(sqrt(s2chain),1);

%Plotting variables
%Simulated fluorescences of best fit
[simMS2,simPP7] = GetFluorFromPolPos(construct,ConstantElongationSim(mean_v,mean_ton,...
    mean_R+mean_dR,data.xdata),mean_v,mean_tau,mean_MS2_basal,mean_PP7_basal);
simMS2 = mean_A * simMS2; %Incorporate scaling factor
t_plot = t;
MS2_plot = MS2;
PP7_plot = PP7;

%% Save single nucleus data
MCMCchain(cellNum).v_chain = v_chain;
MCMCchain(cellNum).tau_chain = tau_chain;
MCMCchain(cellNum).ton_chain = ton_chain;
MCMCchain(cellNum).A_chain = A_chain;
MCMCchain(cellNum).MS2_basal_chain = MS2_basal_chain;
MCMCchain(cellNum).PP7_basal_chain = PP7_basal_chain;
MCMCchain(cellNum).R_chain = R_chain;
MCMCchain(cellNum).dR_chain = dR_chain;
MCMCchain(cellNum).s2chain = s2chain;

MCMCresults(cellNum).mean_v = mean_v;
MCMCresults(cellNum).sigma_v = sigma_v;
MCMCresults(cellNum).mean_tau = mean_tau;
MCMCresults(cellNum).sigma_tau = sigma_tau;
MCMCresults(cellNum).mean_ton = mean_ton;
MCMCresults(cellNum).sigma_ton = sigma_ton;
MCMCresults(cellNum).mean_A = mean_A;
MCMCresults(cellNum).sigma_A = sigma_A;
MCMCresults(cellNum).mean_MS2_basal = mean_MS2_basal;
MCMCresults(cellNum).sigma_MS2_basal = sigma_MS2_basal;
MCMCresults(cellNum).mean_PP7_basal = mean_PP7_basal;
MCMCresults(cellNum).sigma_PP7_basal = sigma_PP7_basal;
MCMCresults(cellNum).mean_R = mean_R;
MCMCresults(cellNum).sigma_R = sigma_R;
MCMCresults(cellNum).mean_dR = mean_dR;
MCMCresults(cellNum).sigma_dR = sigma_dR;
MCMCresults(cellNum).mean_sigma = mean_sigma;
MCMCresults(cellNum).sigma_sigma = sigma_sigma;
MCMCresults(cellNum).cell_index = cellNum;

%If using previous results, carry over approval/rejection
if loadPrevious
    MCMCresults(cellNum).ApprovedFits = initialresults_all(k).MCMCresults(cellToload).ApprovedFits;
else
    MCMCresults(cellNum).ApprovedFits = 0; %No approval/rejection by default
end

MCMCplot(cellNum).t_plot = t_plot;
MCMCplot(cellNum).MS2_plot = MS2_plot;
MCMCplot(cellNum).PP7_plot = PP7_plot;
MCMCplot(cellNum).simMS2 = simMS2;
MCMCplot(cellNum).simPP7 = simPP7;
end

%% Postprocessing: reject empty particle results, save dataset info
remove_indices = false(1,length(MCMCchain));
for cellNum = 1:length(MCMCchain)
    if isempty(MCMCchain(cellNum).v_chain)
        remove_indices(cellNum) = true;
    end
end

MCMCchain(remove_indices) = [];
MCMCresults(remove_indices) = [];
MCMCplot(remove_indices) = [];

%% Save data into .mat structure
filename = [date,'-',DatasetName];
save([saveLoc,'\',filename,'.mat'],'MCMCresults','MCMCplot','DatasetName');

loc_rawchain = [saveLoc,'\Raw Chains\'];
filename = [date,'-',DatasetName,'_RawChain'];
save([loc_rawchain,filename,'.mat'],'MCMCchain');
end

close(w);
disp(['MCMC analysis complete. Information stored in: ',fileLoc]);
end